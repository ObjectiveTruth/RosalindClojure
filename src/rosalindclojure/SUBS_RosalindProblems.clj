(use '[clojure.string])

(def sample "TAAATTGGTTAAATTGCAAACTCCGTCCCCTAAATTGACATGCATAAATTGTTAAATTGTTAAATTGTGTCTAAATTGTAAATTGTAAATTGTGTAAATTGCAACATAAATTGCTAAATTGCTAAATTGGTTAAATTGCGTAAATTGTCACACTCCTTTAAATTGTAAATTGTAAATTGCATTTAAATTGCGCTTAAATTGGTAAGATAAATTGTATTAAATTGGTAAATTGTAAATTGTAAATTGTTATAAATTGCGTAAATTGTAAATTGCTAAATTGCGCGCTAAATTGATGTAAATTGATATGATAAATTGTCTAAATTGCCTAAATTGTAAATTGATCTCACTAAATTGTAAATTGAGTAAATTGTAAATTGCTAAATTGATAAATTGACTAAATTGGCGCTGCTATTAAATTGGGTAAATTGACAATCGTCCATTAAATTGTAAATTGTAAATTGATAAATTGCACCACAGGCACTGTTAGAGATAAATTGTAAATTGCGTAAATAAATTGGACCCAGTAAATTGTAAATTGCGGTAAATTGATAGGCTAAATTGTTTAAATTGAGTAAATTGGTTAAATTGATAAATTGTTAAATTGTAAATTGTTAGGTTAAATTGTTCATAAATTGTAAATTGTGATTATAAATTGTAAATTGGGATGATAAATTGTAAATTGGTCAGTAAATTGTAAATTGTAAATTGTAAATTGATCGTAAATTGGCTAAATTGTAAATTGTATTAAATTGGTAAATTGAGCGTAAATTGTAAATTGTAAATTGCGAAAATGACGGAATCACATAAATTGA")

(def searchTerm "TAAATTGTA")

(def matcher (re-matcher (re-pattern searchTerm) sample))

(map inc (rest (sort (loop [returnSeq (seq '(-1))
                   startPoint 0
                   ]
  (if (.find matcher startPoint)
    (recur (conj returnSeq (.start matcher)) (inc (.start matcher)))
    (seq returnSeq)
  )
))))
